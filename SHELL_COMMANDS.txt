from django.contrib.auth.models import User
from news.models import Author, Category, Post, PostCategory, Comment

# Idempotent population: uses get_or_create; likes/dislikes only on first creation

# 1) Users
u1, u1_created = User.objects.get_or_create(username='alice', defaults={'email': 'alice@example.com'})
if u1_created:
    u1.set_password('alicepass')
    u1.save()
u2, u2_created = User.objects.get_or_create(username='bob', defaults={'email': 'bob@example.com'})
if u2_created:
    u2.set_password('bobpass')
    u2.save()

# 2) Authors
a1, _ = Author.objects.get_or_create(user=u1)
a2, _ = Author.objects.get_or_create(user=u2)

# 3) Categories
c1, _ = Category.objects.get_or_create(name='Спорт')
c2, _ = Category.objects.get_or_create(name='Политика')
c3, _ = Category.objects.get_or_create(name='Образование')
c4, _ = Category.objects.get_or_create(name='Технологии')

# 4) Posts (titles/texts специально с плохими словами в начале, чтобы фильтр был виден сразу)
p1, p1_created = Post.objects.get_or_create(author=a1, post_type=Post.ARTICLE, title='Редиска в огороде', defaults={'text': 'Редиска полезна. Тест фильтра на начале текста.'})
p2, p2_created = Post.objects.get_or_create(author=a1, post_type=Post.ARTICLE, title='Про редиску и грядки', defaults={'text': 'редиска встречается часто. Проверка фильтра.'})
p3, p3_created = Post.objects.get_or_create(author=a2, post_type=Post.NEWS, title='Новости: Редиска в трендах', defaults={'text': 'Редиска попала в новости. Ещё проверка.'})

# Если посты уже были, обновим поля, чтобы слово было в первых 20 символах
if not p1_created:
    p1.title = 'Редиска в огороде'
    p1.text = 'Редиска полезна. Тест фильтра на начале текста.'
    p1.save(update_fields=['title', 'text'])
if not p2_created:
    p2.title = 'Про редиску и грядки'
    p2.text = 'редиска встречается часто. Проверка фильтра.'
    p2.save(update_fields=['title', 'text'])
if not p3_created:
    p3.title = 'Новости: Редиска в трендах'
    p3.text = 'Редиска попала в новости. Ещё проверка.'
    p3.save(update_fields=['title', 'text'])

# 5) Assign categories
p1.categories.add(c1, c2)
p2.categories.add(c3)
p3.categories.add(c2, c4)

# 6) Comments
cm1, cm1_created = Comment.objects.get_or_create(post=p1, user=u2, defaults={'text': 'Отличная статья!'})
cm2, cm2_created = Comment.objects.get_or_create(post=p1, user=u1, defaults={'text': 'Спасибо за отзыв!'})
cm3, cm3_created = Comment.objects.get_or_create(post=p2, user=u2, defaults={'text': 'Неплохо, но можно лучше.'})
cm4, cm4_created = Comment.objects.get_or_create(post=p3, user=u1, defaults={'text': 'Интересная новость.'})

# 7) Ratings (apply once on first creation to keep script idempotent)
def apply_initial_votes():
    # posts
    if p1_created:
        p1.like(); p1.like(); p1.like(); p1.dislike()
    if p2_created:
        p2.like(); p2.dislike(); p2.dislike()
    if p3_created:
        p3.like(); p3.like()
    # comments
    if cm1_created:
        cm1.like(); cm1.like()
    if cm2_created:
        cm2.dislike()
    if cm3_created:
        cm3.like()
    if cm4_created:
        cm4.like(); cm4.dislike(); cm4.dislike()

apply_initial_votes()

# 8) Update authors ratings
a1.update_rating()
a2.update_rating()

# 9) Best author
best_author = Author.objects.order_by('-rating').select_related('user').first()
print('BEST AUTHOR:', best_author.user.username, best_author.rating)

# 10) Best post
best_post = Post.objects.order_by('-rating').select_related('author__user').first()
print('BEST POST:', best_post.created_at, best_post.author.user.username, best_post.rating, best_post.title, best_post.preview())

# 11) Comments of best post
comments = Comment.objects.filter(post=best_post).select_related('user').order_by('created_at')
for c in comments:
    print('COMMENT:', c.created_at, c.user.username, c.rating, c.text)


